# azure-pipelines.yml
trigger:
  branches:
    include:
      - main
      - develop

# ---------------------------------------------------------------------------#
#  Global variables                                                          #
# ---------------------------------------------------------------------------#
variables:
  imageName: azdevops-cicd-sample
  azureSubscription: AzureSubscriptionConnection      # ARM service connection
  acrName: nithinkatruacr                             # Azure Container Registry
  rgName: ci-cd-rg                                    # Resource group for WebApp
  tfStateStorageAccount: tfstateYourSuffix            # Remote state storage
  tfStateContainer: tfstate                           # Remote state container
  sonarOrg: akhil-mano52020                           # SonarCloud organisation

# ---------------------------------------------------------------------------#
#  CI  ─ Build / Test / Lint / Sonar / Push image                            #
# ---------------------------------------------------------------------------#
stages:
- stage: Build
  displayName: 'CI: Build, Test & Sonar'
  jobs:
  - job: Build
    displayName: 'Self-Hosted Windows Build'
    pool:
      name: LocalSelfHostedPool1                     # your Windows agent pool
      demands:
        - agent.os -equals Windows_NT

    steps:
    - checkout: self
      persistCredentials: true

    # --- Verify Java is available (preinstalled on the agent) --------------
    - script: |
        echo "JAVA_HOME  = %JAVA_HOME%"
        echo "java -version output:"
        java -version
      displayName: 'Verify Java installation'

    # --- Log in to ACR ------------------------------------------------------
    - task: AzureCLI@2
      displayName: 'Login to ACR'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $(acrName)

    # --- Node / NPM ---------------------------------------------------------
    - task: NodeTool@0
      displayName: 'Use Node.js 20'
      inputs:
        versionSpec: '20.x'

    - script: npm ci
      displayName: 'Install dependencies'
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm run lint
      displayName: 'Lint code'
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm test
      displayName: 'Run tests'
      workingDirectory: $(Build.SourcesDirectory)

    # --- Build & push Docker image -----------------------------------------
    - task: PowerShell@2
      displayName: 'Build & push Docker image'
      inputs:
        targetType: inline
        workingDirectory: $(Build.SourcesDirectory)
        script: |
          docker build -t $(acrName).azurecr.io/$(imageName):$(Build.BuildId) .
          docker push  $(acrName).azurecr.io/$(imageName):$(Build.BuildId)

    # --- SonarCloud analysis ------------------------------------------------
    - task: SonarCloudPrepare@3
      displayName: 'Prepare SonarCloud analysis'
      inputs:
        SonarCloud: SonarCloud                       # service connection
        organization: $(sonarOrg)
        scannerMode: CLI
        configMode: manual
        cliProjectKey: akhilmano1_azure-devops-cicd-sample-Public
        cliProjectName: CI-CD Sample

    - task: SonarCloudAnalyze@3
      displayName: 'Run SonarCloud analysis'

    - task: SonarCloudPublish@3
      displayName: 'Publish SonarCloud Quality Gate'

    # --- Publish build artifacts -------------------------------------------
    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop

# ---------------------------------------------------------------------------#
#  CD  ─ Terraform & WebApp deploy                                           #
# ---------------------------------------------------------------------------#
- stage: Deploy
  displayName: 'CD: Terraform + WebApp Deploy'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: 'Terraform + WebApp'
    environment: $(Build.SourceBranchName)            # dev / prod slot names
    pool:
      vmImage: ubuntu-latest                          # MS-hosted Linux agent

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          # Terraform CLI
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 1.0.0

          - task: TerraformTaskV1@0
            displayName: 'Terraform Init'
            inputs:
              provider: azurerm
              command: init
              workingDirectory: terraform
              backendServiceArm: $(azureSubscription)
              backendAzureRmResourceGroupName: $(rgName)
              backendAzureRmStorageAccountName: $(tfStateStorageAccount)
              backendAzureRmContainerName: $(tfStateContainer)
              backendAzureRmKey: terraform.tfstate

          - task: TerraformTaskV1@0
            displayName: 'Terraform Apply'
            inputs:
              provider: azurerm
              command: apply
              environmentServiceName: $(azureSubscription)
              workingDirectory: terraform
              args: -auto-approve -var "environment=$(Build.SourceBranchName)"

          # Deploy container to Web App
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: $(azureSubscription)
              resourceGroupName: $(rgName)
              appName: cicd-webapp-$(Build.SourceBranchName)
              imageName: $(acrName).azurecr.io/$(imageName):$(Build.BuildId)
