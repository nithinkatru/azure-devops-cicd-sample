trigger:
  branches: { include: [ main, develop ] }

variables:
  imageName:  azdevops-cicd-sample
  imageTag:   $(Build.BuildId)

  azureSubscription: AzureSubscriptionConnection

  rgName:           ci-cd-rg
  acrName:          nithinkatruacr
  appServicePrefix: cicd-webapp
  servicePlanName:  cicd-asp
  location:         eastus                # used by az cli create

  tfStateStorageAccount: tfstateYourSuffix
  tfStateContainer:      tfstate

  sonarOrg: akhilmano1

stages:
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Build ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
- stage: Build
  jobs:
  - job: Build
    pool: { name: LocalSelfHostedPool1, demands: [ "agent.os -equals Windows_NT" ] }

    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: "Login to ACR"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: az acr login --name $(acrName)

    - task: NodeTool@0
      inputs: { versionSpec: "20.x" }

    - script: npm ci --loglevel error
      displayName: "npm ci"
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm run lint
      displayName: "lint"
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm test
      displayName: "unit tests"
      workingDirectory: $(Build.SourcesDirectory)

    - task: PowerShell@2
      displayName: "Build & push Docker image"
      inputs:
        targetType: inline
        workingDirectory: $(Build.SourcesDirectory)
        script: |
          docker build -t $(acrName).azurecr.io/$(imageName):$(imageTag) .
          docker push  $(acrName).azurecr.io/$(imageName):$(imageTag)

    # ----- Sonar (optional) -----
    - task: SonarCloudPrepare@3
      inputs:
        SonarCloud: SonarCloud
        organization: $(sonarOrg)
        scannerMode: CLI
        configMode: manual
        cliProjectKey: akhilmano1_azure-devops-cicd-sample-Public
        cliProjectName: CI-CD Sample
    - task: SonarCloudAnalyze@3
    - task: SonarCloudPublish@3

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Deploy ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
- stage: Deploy
  dependsOn: Build
  displayName: "CD: Push container to existing App Service"

  jobs:
  - deployment: Deploy
    environment: $(Build.SourceBranchName)
    pool: { name: LocalSelfHostedPool1, demands: [ "agent.os -equals Windows_NT" ] }

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

                          # 1Ô∏è‚É£ Ensure App Service Plan + Web App exist
          - task: AzureCLI@2
            displayName: "Create plan & webapp if absent"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                $rg        = "$(rgName)"
                $planName  = "$(servicePlanName)"
                $appName   = "$(appServicePrefix)-$(Build.SourceBranchName)"
                $location  = "$(location)"    # eastus

                Write-Host "üîé Checking App Service Plan '$planName'..."
                $plan = az appservice plan show -g $rg -n $planName --query name -o tsv 2>$null
                if (-not $plan) {
                  Write-Host "‚ûï Creating App Service Plan '$planName'"
                  az appservice plan create `
                       --name $planName `
                       --resource-group $rg `
                       --sku B1 `
                       --is-linux `
                       --location $location
                  # wait until ARM has fully provisioned the plan
                  Write-Host "‚è≥ Waiting for plan to become available..."
                  do {
                    Start-Sleep -Seconds 5
                    $plan = az appservice plan show -g $rg -n $planName --query name -o tsv 2>$null
                  } until ($plan)
                } else {
                  Write-Host "‚úÖ Plan exists."
                }

                Write-Host "üîé Checking Web App '$appName'..."
                $app = az webapp show -g $rg -n $appName --query name -o tsv 2>$null
                if (-not $app) {
                  Write-Host "‚ûï Creating Web App '$appName'"
                  az webapp create `
                       --resource-group $rg `
                       --plan $planName `
                       --name $appName `
                       --deployment-container-image-name "mcr.microsoft.com/oss/nginx/nginx:latest"
                  Write-Host "‚úÖ Web App created."
                } else {
                  Write-Host "‚úÖ Web App exists."
                }


          # 2Ô∏è‚É£ Deploy the container image
          - task: AzureWebAppContainer@1
            displayName: "Deploy container to App Service"
            inputs:
              azureSubscription: $(azureSubscription)
              resourceGroupName: $(rgName)
              appName: $(appServicePrefix)-$(Build.SourceBranchName)
              imageName: $(acrName).azurecr.io/$(imageName):$(imageTag)
