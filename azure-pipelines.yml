trigger:
  branches: { include: [ main, develop ] }

# ─────────────────────────── Variables ───────────────────────────
variables:
  # Container image
  imageName:  azdevops-cicd-sample
  imageTag:   $(Build.BuildId)

  # Azure DevOps ARM service-connection
  azureSubscription: AzureSubscriptionConnection

  # Azure resource names
  rgName:           ci-cd-rg
  acrName:          nithinkatruacr
  appServicePrefix: cicd-webapp
  servicePlanName:  cicd-asp

  # Terraform remote-state
  tfStateStorageAccount: tfstateYourSuffix
  tfStateContainer:      tfstate

  # SonarCloud org (remove Sonar steps if you don’t use them)
  sonarOrg: akhilmano1

# ─────────────────────────── Build stage ─────────────────────────
stages:
# ---------------------------------------------------------------- Build --
- stage: Build
  displayName: "CI: Build, Test, Lint, Sonar"
  jobs:
  - job: Build
    pool: { name: LocalSelfHostedPool1, demands: [ "agent.os -equals Windows_NT" ] }

    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: "Login to ACR"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: az acr login --name $(acrName)

    - task: NodeTool@0
      displayName: "Use Node.js 20"
      inputs: { versionSpec: "20.x" }

    # ------------ FIXED npm install step (single line, correct cwd) -------
    - script: npm ci --loglevel error
      displayName: "npm ci (install deps)"
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm run lint
      displayName: "lint"
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm test
      displayName: "unit tests"
      workingDirectory: $(Build.SourcesDirectory)
    # ---------------------------------------------------------------------

    - task: PowerShell@2
      displayName: "Build & push Docker image"
      inputs:
        targetType: inline
        workingDirectory: $(Build.SourcesDirectory)
        script: |
          docker build -t $(acrName).azurecr.io/$(imageName):$(imageTag) .
          docker push  $(acrName).azurecr.io/$(imageName):$(imageTag)

    # (SonarCloud – optional)
    - task: SonarCloudPrepare@3
      inputs:
        SonarCloud: SonarCloud
        organization: $(sonarOrg)
        scannerMode: CLI
        configMode: manual
        cliProjectKey: akhilmano1_azure-devops-cicd-sample-Public
        cliProjectName: CI-CD Sample
    - task: SonarCloudAnalyze@3
    - task: SonarCloudPublish@3

# ─────────────────────────── Deploy stage ────────────────────────
- stage: Deploy
  displayName: "CD: Terraform & WebApp"
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(Build.SourceBranchName)
    pool: { name: LocalSelfHostedPool1, demands: [ "agent.os -equals Windows_NT" ] }

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          # 1️⃣ Install Terraform
          - task: TerraformInstaller@0
            inputs: { terraformVersion: 1.7.5 }

          # 2️⃣ Check if RG exists
          - task: AzureCLI@2
            name: rgCheck
            displayName: "Check RG existence"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                $exists = az group exists --name $(rgName)
                Write-Host "RG exists? $exists"
                echo "##vso[task.setvariable variable=RG_EXISTS]$exists"

          # 3️⃣ terraform init
          - task: TerraformTaskV4@4
            displayName: "Terraform init"
            inputs:
              provider: azurerm
              command: init
              workingDirectory: terraform
              backendServiceArm: $(azureSubscription)
              backendAzureRmResourceGroupName: $(rgName)
              backendAzureRmStorageAccountName: $(tfStateStorageAccount)
              backendAzureRmContainerName: $(tfStateContainer)
              backendAzureRmKey: terraform.tfstate
            env: { ARM_USE_AZUREAD: true }

          # 4️⃣ Import RG (PowerShell) — only if it exists
          - task: PowerShell@2
            displayName: "Import RG if present"
            condition: eq(variables.RG_EXISTS, 'true')
            inputs:
              targetType: inline
              workingDirectory: terraform
              script: |
                Write-Host "Importing RG into state..."
                terraform.exe import `
                  azurerm_resource_group.rg `
                  /subscriptions/065cdc71-cbc8-4c74-9214-17d87ae5ada1/resourceGroups/$(rgName) `
                  || Write-Host "RG already imported or import skipped."
            env: { ARM_USE_AZUREAD: true }

          # 5️⃣ terraform apply
          - task: TerraformTaskV4@4
            displayName: "Terraform apply"
            inputs:
              provider: azurerm
              command: apply
              workingDirectory: terraform
              environmentServiceNameAzureRM: $(azureSubscription)
              commandOptions: >-
                -input=false
                -auto-approve
                -var "resource_group_name=$(rgName)"
                -var "service_plan_name=$(servicePlanName)"
                -var "web_app_name=$(appServicePrefix)-$(Build.SourceBranchName)"
                -var "image_name=$(imageName)"
                -var "image_tag=$(imageTag)"
                -var "acr_name=$(acrName)"
            env: { ARM_USE_AZUREAD: true }

          # 6️⃣ Deploy the image to Web App
          - task: AzureWebAppContainer@1
            displayName: "Deploy container to App Service"
            inputs:
              azureSubscription: $(azureSubscription)
              resourceGroupName: $(rgName)
              appName: $(appServicePrefix)-$(Build.SourceBranchName)
              imageName: $(acrName).azurecr.io/$(imageName):$(imageTag)
