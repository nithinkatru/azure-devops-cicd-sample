trigger:
  branches:
    include:
      - main
      - develop

# ────────────────────────── Global variables ──────────────────────────────
variables:
  # Build-time image tagging
  imageName: azdevops-cicd-sample
  imageTag: $(Build.BuildId)

  # Azure DevOps service-connection (ARM)
  azureSubscription: AzureSubscriptionConnection

  # Azure resource names
  rgName: ci-cd-rg                  # Resource Group
  acrName: nithinkatruacr           # ACR
  appServicePrefix: cicd-webapp     # WebApp name root
  servicePlanName: cicd-asp         # App Service Plan name

  # Terraform remote-state
  tfStateStorageAccount: tfstateYourSuffix
  tfStateContainer: tfstate

  # SonarCloud
  sonarOrg: akhilmano1

# ──────────────────────── Stage: Build / Test / Scan ──────────────────────
stages:
# ---------------------------------------------------------------- Build --
- stage: Build
  displayName: "CI: Build, Test & Sonar"
  jobs:
  - job: Build
    displayName: "Self-Hosted Windows Build"
    pool:
      name: LocalSelfHostedPool1
      demands:
        - agent.os -equals Windows_NT

    steps:
    - checkout: self
      persistCredentials: true

    - script: |
        echo "JAVA_HOME=%JAVA_HOME%"
        java -version
      displayName: "Verify Java"

    - task: AzureCLI@2
      displayName: "Login to ACR"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $(acrName)

    - task: NodeTool@0
      displayName: "Use Node.js 20"
      inputs:
        versionSpec: "20.x"

    - script: npm ci
      displayName: "Install deps"
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm run lint
      displayName: "Lint"
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm test
      displayName: "Unit tests"
      workingDirectory: $(Build.SourcesDirectory)

    - task: PowerShell@2
      displayName: "Build & push image"
      inputs:
        targetType: inline
        workingDirectory: $(Build.SourcesDirectory)
        script: |
          docker build -t $(acrName).azurecr.io/$(imageName):$(imageTag) .
          docker push $(acrName).azurecr.io/$(imageName):$(imageTag)

    - task: SonarCloudPrepare@3
      displayName: "Sonar – prepare"
      inputs:
        SonarCloud: SonarCloud
        organization: $(sonarOrg)
        scannerMode: CLI
        configMode: manual
        cliProjectKey: akhilmano1_azure-devops-cicd-sample-Public
        cliProjectName: CI-CD Sample

    - task: SonarCloudAnalyze@3
      displayName: "Sonar – analyze"

    - task: SonarCloudPublish@3
      displayName: "Sonar – quality gate"

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop

# ────────────────────────── Stage: Deploy ────────────────────────────────
# --------------------------------------------------------------- Deploy --
- stage: Deploy
  displayName: "CD: Terraform + WebApp Deploy"
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: "Terraform + WebApp"
    environment: $(Build.SourceBranchName)
    pool:
      name: LocalSelfHostedPool1
      demands:
        - agent.os -equals Windows_NT

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          # 1️⃣ Install Terraform
          - task: TerraformInstaller@0
            displayName: "Install Terraform 1.7.5"
            inputs:
              terraformVersion: 1.7.5   # use 'latest' if you prefer

          # 2️⃣ Detect whether the RG already exists
          - task: AzureCLI@2
            displayName: "Detect existing RG"
            name: rgCheck
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                $exists = az group exists --name $(rgName)
                echo "Resource group exists? $exists"
                echo "##vso[task.setvariable variable=RG_EXISTS]$exists"

          # 3️⃣ Import RG into state if it already exists
          - task: TerraformTaskV4@4
            displayName: "Terraform import RG (conditional)"
            condition: eq(variables.RG_EXISTS, 'true')
            inputs:
              provider: azurerm
              command: import
              workingDirectory: terraform
              environmentServiceNameAzureRM: $(azureSubscription)
              resourceAddress: azurerm_resource_group.rg
              resourceId: /subscriptions/065cdc71-cbc8-4c74-9214-17d87ae5ada1/resourceGroups/$(rgName)
            env:
              ARM_USE_AZUREAD: true
            continueOnError: true   # OK if already imported

          # 4️⃣ Terraform init
          - task: TerraformTaskV4@4
            displayName: "Terraform Init"
            inputs:
              provider: azurerm
              command: init
              workingDirectory: terraform
              backendServiceArm: $(azureSubscription)
              backendAzureRmResourceGroupName: $(rgName)
              backendAzureRmStorageAccountName: $(tfStateStorageAccount)
              backendAzureRmContainerName: $(tfStateContainer)
              backendAzureRmKey: terraform.tfstate
            env:
              ARM_USE_AZUREAD: true

          # 5️⃣ Terraform apply
          - task: TerraformTaskV4@4
            displayName: "Terraform Apply"
            inputs:
              provider: azurerm
              command: apply
              workingDirectory: terraform
              environmentServiceNameAzureRM: $(azureSubscription)
              commandOptions: >-
                -input=false
                -auto-approve
                -var "resource_group_name=$(rgName)"
                -var "service_plan_name=$(servicePlanName)"
                -var "web_app_name=$(appServicePrefix)-$(Build.SourceBranchName)"
                -var "image_name=$(imageName)"
                -var "image_tag=$(imageTag)"
                -var "acr_name=$(acrName)"
            env:
              ARM_USE_AZUREAD: true

          # 6️⃣ Deploy container to Web App
          - task: AzureWebAppContainer@1
            displayName: "Deploy to Azure Web App"
            inputs:
              azureSubscription: $(azureSubscription)
              resourceGroupName: $(rgName)
              appName: $(appServicePrefix)-$(Build.SourceBranchName)
              imageName: $(acrName).azurecr.io/$(imageName):$(imageTag)
