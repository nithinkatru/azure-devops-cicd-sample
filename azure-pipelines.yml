trigger:
  branches:
    include:
      - main
      - develop

# ────────────────────────── Global variables ──────────────────────────────
variables:
  # Container-build info
  imageName: azdevops-cicd-sample
  imageTag: $(Build.BuildId)

  # Azure DevOps service-connection
  azureSubscription: AzureSubscriptionConnection   # ARM service connection

  # Azure resource names
  acrName: nithinkatruacr          # Azure Container Registry
  rgName: ci-cd-rg                 # Resource Group
  appServicePrefix: cicd-webapp    # Base for Web-App name per branch
  servicePlanName: cicd-asp        # <-- new: App Service Plan name

  # Terraform remote-state
  tfStateStorageAccount: tfstateYourSuffix
  tfStateContainer: tfstate

  # SonarCloud
  sonarOrg: akhilmano1

# ────────────────────────── Stage: Build ──────────────────────────────────
stages:
# ---------------------------------------------------------------- Build --
- stage: Build
  displayName: "CI: Build, Test & Sonar"
  jobs:
  - job: Build
    displayName: "Self-Hosted Windows Build"
    pool:
      name: LocalSelfHostedPool1
      demands:
        - agent.os -equals Windows_NT

    steps:
    - checkout: self
      persistCredentials: true

    - script: |
        echo "JAVA_HOME=%JAVA_HOME%"
        java -version
      displayName: "Verify Java installation"

    - task: AzureCLI@2
      displayName: "Login to ACR"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $(acrName)

    - task: NodeTool@0
      displayName: "Use Node.js 20"
      inputs:
        versionSpec: "20.x"

    - script: npm ci
      displayName: "Install dependencies"
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm run lint
      displayName: "Lint code"
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm test
      displayName: "Run tests"
      workingDirectory: $(Build.SourcesDirectory)

    - task: PowerShell@2
      displayName: "Build & push Docker image"
      inputs:
        targetType: inline
        workingDirectory: $(Build.SourcesDirectory)
        script: |
          docker build -t $(acrName).azurecr.io/$(imageName):$(imageTag) .
          docker push $(acrName).azurecr.io/$(imageName):$(imageTag)

    - task: SonarCloudPrepare@3
      displayName: "Prepare SonarCloud analysis"
      inputs:
        SonarCloud: SonarCloud
        organization: $(sonarOrg)
        scannerMode: CLI
        configMode: manual
        cliProjectKey: akhilmano1_azure-devops-cicd-sample-Public
        cliProjectName: CI-CD Sample

    - task: SonarCloudAnalyze@3
      displayName: "Run SonarCloud analysis"

    - task: SonarCloudPublish@3
      displayName: "Publish SonarCloud Quality Gate"

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop

# ────────────────────────── Stage: Deploy ────────────────────────────────
# --------------------------------------------------------------- Deploy --
- stage: Deploy
  displayName: "CD: Terraform + WebApp Deploy"
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: "Terraform + WebApp"
    environment: $(Build.SourceBranchName)
    pool:
      name: LocalSelfHostedPool1
      demands:
        - agent.os -equals Windows_NT

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          # 1. Install Terraform
          - task: TerraformInstaller@0
            displayName: "Install Terraform"
            inputs:
              terraformVersion: 1.7.5      # or 'latest'

          # 2. terraform init
          - task: TerraformTaskV4@4
            displayName: "Terraform Init"
            inputs:
              provider: azurerm
              command: init
              workingDirectory: terraform
              backendServiceArm: $(azureSubscription)
              backendAzureRmResourceGroupName: $(rgName)
              backendAzureRmStorageAccountName: $(tfStateStorageAccount)
              backendAzureRmContainerName: $(tfStateContainer)
              backendAzureRmKey: terraform.tfstate
            env:
              ARM_USE_AZUREAD: true

          # 3. terraform apply
          - task: TerraformTaskV4@4
            displayName: "Terraform Apply"
            inputs:
              provider: azurerm
              command: apply
              workingDirectory: terraform
              environmentServiceNameAzureRM: $(azureSubscription)
              commandOptions: >-
                -input=false
                -auto-approve
                -var "resource_group_name=$(rgName)"
                -var "service_plan_name=$(servicePlanName)"
                -var "web_app_name=$(appServicePrefix)-$(Build.SourceBranchName)"
                -var "image_name=$(imageName)"
                -var "image_tag=$(imageTag)"
                -var "acr_name=$(acrName)"
            env:
              ARM_USE_AZUREAD: true

          # 4. Deploy container to Web App
          - task: AzureWebAppContainer@1
            displayName: "Deploy to Azure Web App"
            inputs:
              azureSubscription: $(azureSubscription)
              resourceGroupName: $(rgName)
              appName: $(appServicePrefix)-$(Build.SourceBranchName)
              imageName: $(acrName).azurecr.io/$(imageName):$(imageTag)
