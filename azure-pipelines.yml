# azure-pipelines.yml
trigger:
  branches:
    include:
      - main
      - develop

# ──────────────────────────  Global variables  ────────────────────────────
variables:
  imageName: azdevops-cicd-sample                # Docker tag base
  azureSubscription: AzureSubscriptionConnection # ARM service connection
  acrName: nithinkatruacr                        # Azure Container Registry
  rgName: ci-cd-rg                               # Resource group for Web App
  tfStateStorageAccount: tfstateYourSuffix       # Remote state storage
  tfStateContainer: tfstate                      # Remote state container
  sonarOrg: akhilmano1                           # SonarCloud organization

# ────────────────────────  Stage: Build / Test / Scan  ─────────────────────
stages:
- stage: Build
  displayName: 'CI: Build, Test & Sonar'
  jobs:
  - job: Build
    displayName: 'Self-Hosted Windows Build'
    pool:
      name: LocalSelfHostedPool1
      demands:
        - agent.os -equals Windows_NT

    steps:
    # Checkout repo
    - checkout: self
      persistCredentials: true

    # Verify Java (pre-installed on agent)
    - script: |
        echo "JAVA_HOME = %JAVA_HOME%"
        java -version
      displayName: 'Verify Java installation'

    # Log in to ACR
    - task: AzureCLI@2
      displayName: 'Login to ACR'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $(acrName)

    # Node / NPM
    - task: NodeTool@0
      displayName: 'Use Node.js 20'
      inputs:
        versionSpec: '20.x'

    - script: npm ci
      displayName: 'Install dependencies'
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm run lint
      displayName: 'Lint code'
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm test
      displayName: 'Run tests'
      workingDirectory: $(Build.SourcesDirectory)

    # Build & push Docker image
    - task: PowerShell@2
      displayName: 'Build & push Docker image'
      inputs:
        targetType: inline
        workingDirectory: $(Build.SourcesDirectory)
        script: |
          docker build -t $(acrName).azurecr.io/$(imageName):$(Build.BuildId) .
          docker push  $(acrName).azurecr.io/$(imageName):$(Build.BuildId)

    # SonarCloud analysis
    - task: SonarCloudPrepare@3
      displayName: 'Prepare SonarCloud analysis'
      inputs:
        SonarCloud: SonarCloud
        organization: $(sonarOrg)
        scannerMode: CLI
        configMode: manual
        cliProjectKey: akhilmano1_azure-devops-cicd-sample-Public
        cliProjectName: CI-CD Sample
        # Uncomment below when you want branch analyses to show separately
        # extraProperties: |
        #   sonar.branch.name=$(Build.SourceBranchName)

    - task: SonarCloudAnalyze@3
      displayName: 'Run SonarCloud analysis'

    - task: SonarCloudPublish@3
      displayName: 'Publish SonarCloud Quality Gate'

    # Publish build artifacts (if needed by later stages)
    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop

# ─────────────────────────  Stage: Deploy (self-hosted)  ───────────────────
- stage: Deploy
  displayName: 'CD: Terraform + WebApp Deploy'
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: 'Terraform + WebApp'
    environment: $(Build.SourceBranchName)        # Dev/prod slot name

    # ▶ Use the same self-hosted pool (no hosted parallelism required)
    pool:
      name: LocalSelfHostedPool1
      demands:
        - agent.os -equals Windows_NT

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          # Install Terraform (works fine on Windows)
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 1.0.0

          # Terraform init
          - task: TerraformTaskV4@4 
            displayName: 'Terraform Init'
            inputs:
              provider: azurerm
              command: init
              workingDirectory: terraform
              backendServiceArm: $(azureSubscription)
              backendAzureRmResourceGroupName: $(rgName)
              backendAzureRmStorageAccountName: $(tfStateStorageAccount)
              backendAzureRmContainerName: $(tfStateContainer)
              backendAzureRmKey: terraform.tfstate

          # Terraform apply
          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: azurerm
              command: apply
              environmentServiceNameAzureRM: $(azureSubscription)
              workingDirectory: terraform
              args: -auto-approve -var "environment=$(Build.SourceBranchName)"

          # Deploy container to Web App
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: $(azureSubscription)
              resourceGroupName: $(rgName)
              appName: cicd-webapp-$(Build.SourceBranchName)
              imageName: $(acrName).azurecr.io/$(imageName):$(Build.BuildId)
