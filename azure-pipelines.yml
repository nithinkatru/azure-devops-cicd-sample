trigger:
  branches:
    include:
      - main
      - develop

variables:
  imageName: azdevops-cicd-sample           # repo name inside ACR
  azureSubscription: AzureSubscriptionConnection
  acrName: nithinkatruacr                   # nithinkatruacr.azurecr.io
  rgName: ci-cd-rg
  tfStateStorageAccount: tfstateYourSuffix  # update to actual SA
  tfStateContainer: tfstate
  sonarOrg: akhil-mano52020

# ──────────────────────────────  BUILD / TEST / PUSH  ──────────────────────────
stages:
- stage: Build
  displayName: 'CI: Build, Test & Sonar'
  jobs:
  - job: Build
    displayName: 'Self-Hosted Windows Build'
    pool:
      name: LocalSelfHostedPool1
      demands:
        - agent.os -equals Windows_NT
    steps:
    - checkout: self
      persistCredentials: true

    # 1 — log in to ACR
    - task: AzureCLI@2
      displayName: 'Login to ACR'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $(acrName)

    # 2 — Node 14, install, lint, test
    - task: NodeTool@0
      displayName: 'Use Node.js 14'
      inputs:
        versionSpec: '14.x'

    - script: npm install
      displayName: 'Install dependencies'
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm run lint
      displayName: 'Lint code'
      workingDirectory: $(Build.SourcesDirectory)

    - script: npm test
      displayName: 'Run tests'
      workingDirectory: $(Build.SourcesDirectory)

    # 3 — build & push image (PowerShell task, multiline is fine)
        # Build + push image (PowerShell task, runs in repo root)
    - task: PowerShell@2
      displayName: 'Build & push Docker image'
      inputs:
        targetType: inline
        workingDirectory: $(Build.SourcesDirectory)      # <─--- must be inside inputs
        script: |
          docker build -t $(acrName).azurecr.io/$(imageName):$(Build.BuildId) .
          docker push  $(acrName).azurecr.io/$(imageName):$(Build.BuildId)


    # 4 — SonarCloud (v3)
    - task: SonarCloudPrepare@3
      displayName: 'Prepare SonarCloud analysis'
      inputs:
        SonarCloud: SonarCloud
        organization: $(sonarOrg)
        scannerMode: CLI
        configMode: manual
        cliProjectKey: azdevops-cicd-sample
        cliProjectName: CI-CD Sample

    - task: SonarCloudAnalyze@3
      displayName: 'Run SonarCloud analysis'

    - task: SonarCloudPublish@3
      displayName: 'Publish SonarCloud Quality Gate'

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop

# ────────────────────────────────  DEPLOY  ────────────────────────────────────
- stage: Deploy
  displayName: 'CD: Terraform + WebApp Deploy'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: 'Terraform + WebApp'
    environment: $(Build.SourceBranchName)
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
        - checkout: self

        - task: TerraformInstaller@0
          displayName: 'Install Terraform'
          inputs:
            terraformVersion: 1.0.0

        - task: TerraformTaskV1@0
          displayName: 'Terraform Init'
          inputs:
            provider: azurerm
            command: init
            workingDirectory: terraform
            backendServiceArm: $(azureSubscription)
            backendAzureRmResourceGroupName: $(rgName)
            backendAzureRmStorageAccountName: $(tfStateStorageAccount)
            backendAzureRmContainerName: $(tfStateContainer)
            backendAzureRmKey: terraform.tfstate

        - task: TerraformTaskV1@0
          displayName: 'Terraform Apply'
          inputs:
            provider: azurerm
            command: apply
            environmentServiceName: $(azureSubscription)
            workingDirectory: terraform
            args: -auto-approve -var "environment=$(Build.SourceBranchName)"

        - task: AzureWebAppContainer@1
          displayName: 'Deploy to Azure Web App'
          inputs:
            azureSubscription: $(azureSubscription)
            resourceGroupName: $(rgName)
            appName: cicd-webapp-$(Build.SourceBranchName)
            imageName: $(acrName).azurecr.io/$(imageName):$(Build.BuildId)
