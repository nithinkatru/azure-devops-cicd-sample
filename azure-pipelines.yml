trigger:
  branches:
    include:
      - main
      - develop

variables:
  imageName: azdevops-cicd-sample
  azureSubscription: AzureSubscriptionConnection
  acrName: nithinkatruacr
  rgName: ci-cd-rg
  location: eastus
  appServicePlan: cicd-plan
  webAppName: "cicd-webapp-$(Build.SourceBranchName)"
  tfStateStorageAccount: tfstateYourSuffix
  tfStateContainer: tfstate
  sonarOrg: your-sonar-org

stages:
  - stage: Build
    displayName: 'CI: Build and Test'
    jobs:
      - job: Build
        displayName: 'Selfâ€‘Hosted Build'
        pool:
          name: LocalSelfHostedPool
          demands:
            - agent.os -equals Windows_NT
        steps:
          - checkout: self
            persistCredentials: true

          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'

          - script: npm install
            displayName: 'Install dependencies'

          - script: npm run lint
            displayName: 'Lint code'

          - script: npm test
            displayName: 'Run tests'

          - script: |
              docker build -t $(acrName).azurecr.io/$(imageName):$(Build.BuildId) .
            displayName: 'Build Docker image'

          - task: Docker@2
            displayName: 'Push image to ACR'
            inputs:
              command: push
              repository: $(acrName).azurecr.io/$(imageName)
              tags: $(Build.BuildId)

          - task: SonarCloudPrepare@1
            displayName: 'Prepare SonarCloud analysis'
            inputs:
              SonarCloud: 'SonarCloud'
              organization: '$(sonarOrg)'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: 'azdevops-cicd-sample'
              cliProjectName: 'CI-CD Sample'

          - task: SonarCloudAnalyze@1
            displayName: 'Run SonarCloud analysis'

          - task: SonarCloudPublish@1
            displayName: 'Publish SonarCloud results'

          - publish: $(Build.ArtifactStagingDirectory)
            artifact: drop

  - stage: Deploy
    displayName: 'CD: Terraform and Deploy'
    dependsOn: Build
    jobs:
      - deployment: Deploy
        displayName: 'Terraform + WebApp Deploy'
        environment: '$(Build.SourceBranchName)'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: TerraformInstaller@0
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: '1.0.0'

                - task: TerraformTaskV1@0
                  displayName: 'Terraform Init'
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: 'terraform'
                    backendServiceArm: '$(azureSubscription)'
                    backendAzureRmResourceGroupName: '$(rgName)'
                    backendAzureRmStorageAccountName: '$(tfStateStorageAccount)'
                    backendAzureRmContainerName: '$(tfStateContainer)'
                    backendAzureRmKey: 'terraform.tfstate'

                - task: TerraformTaskV1@0
                  displayName: 'Terraform Apply'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    environmentServiceName: '$(azureSubscription)'
                    workingDirectory: 'terraform'
                    args: '-auto-approve -var "environment=$(Build.SourceBranchName)"'

                - task: AzureWebAppContainer@1
                  displayName: 'Deploy to Azure Web App'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    resourceGroupName: '$(rgName)'
                    appName: '$(webAppName)'
                    imageName: '$(acrName).azurecr.io/$(imageName):$(Build.BuildId)'
