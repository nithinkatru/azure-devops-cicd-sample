trigger:
  branches: { include: [ main, develop ] }

# ─────────────────────────── Variables ───────────────────────────
variables:
  imageName:  azdevops-cicd-sample
  imageTag:   $(Build.BuildId)

  azureSubscription: AzureSubscriptionConnection   # ARM service connection

  rgName:           ci-cd-rg                       # Resource Group
  acrName:          nithinkatruacr                 # ACR
  appServicePrefix: cicd-webapp                    # WebApp name root
  servicePlanName:  cicd-asp                       # App Service Plan

  tfStateStorageAccount: tfstateYourSuffix
  tfStateContainer:      tfstate

  sonarOrg: akhilmano1

# ─────────────────────────── Build stage ─────────────────────────
stages:
# ---------------------------------------------------------------- Build --
- stage: Build
  displayName: "CI: Build, Test, Lint, Sonar"
  jobs:
  - job: Build
    displayName: Build
    pool: { name: LocalSelfHostedPool1, demands: [ "agent.os -equals Windows_NT" ] }

    steps:
    - checkout: self
    - task: AzureCLI@2
      displayName: "Login to ACR"
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: az acr login --name $(acrName)

    - task: NodeTool@0
      inputs: { versionSpec: "20.x" }

    - script: npm ci             --cwd $(Build.SourcesDirectory)
      displayName: "npm install"
    - script: npm run lint       --cwd $(Build.SourcesDirectory)
      displayName: "lint"
    - script: npm test           --cwd $(Build.SourcesDirectory)
      displayName: "unit tests"

    - task: PowerShell@2
      displayName: "Build & push Docker image"
      inputs:
        targetType: inline
        workingDirectory: $(Build.SourcesDirectory)
        script: |
          docker build -t $(acrName).azurecr.io/$(imageName):$(imageTag) .
          docker push $(acrName).azurecr.io/$(imageName):$(imageTag)

    # (Sonar steps – remove if not needed)
    - task: SonarCloudPrepare@3
      inputs:
        SonarCloud: SonarCloud
        organization: $(sonarOrg)
        scannerMode: CLI
        configMode: manual
        cliProjectKey: akhilmano1_azure-devops-cicd-sample-Public
        cliProjectName: CI-CD Sample
    - task: SonarCloudAnalyze@3
    - task: SonarCloudPublish@3

# ─────────────────────────── Deploy stage ────────────────────────
- stage: Deploy
  displayName: "CD: Terraform & WebApp"
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(Build.SourceBranchName)
    pool: { name: LocalSelfHostedPool1, demands: [ "agent.os -equals Windows_NT" ] }

    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          # 1️⃣ Install Terraform
          - task: TerraformInstaller@0
            inputs: { terraformVersion: 1.7.5 }

          # 2️⃣ Check if the RG already exists
          - task: AzureCLI@2
            name: rgCheck
            displayName: "Check RG existence"
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                $exists = az group exists --name $(rgName)
                Write-Host "RG exists? $exists"
                echo "##vso[task.setvariable variable=RG_EXISTS]$exists"

          # 3️⃣ Terraform init  (creates local state dir)
          - task: TerraformTaskV4@4
            displayName: "Terraform init"
            inputs:
              provider: azurerm
              command: init
              workingDirectory: terraform
              backendServiceArm: $(azureSubscription)
              backendAzureRmResourceGroupName: $(rgName)
              backendAzureRmStorageAccountName: $(tfStateStorageAccount)
              backendAzureRmContainerName: $(tfStateContainer)
              backendAzureRmKey: terraform.tfstate
            env: { ARM_USE_AZUREAD: true }

          # 4️⃣ Import RG *via PowerShell* only if it exists
          - task: PowerShell@2
            displayName: "Import RG if already in Azure"
            condition: eq(variables.RG_EXISTS, 'true')
            inputs:
              targetType: inline
              workingDirectory: terraform
              script: |
                Write-Host "Importing existing RG into Terraform state..."
                terraform.exe import \
                  azurerm_resource_group.rg \
                  /subscriptions/065cdc71-cbc8-4c74-9214-17d87ae5ada1/resourceGroups/$(rgName) `
                  || Write-Host "Import skipped or already in state."
            env: { ARM_USE_AZUREAD: true }

          # 5️⃣ Terraform apply
          - task: TerraformTaskV4@4
            displayName: "Terraform apply"
            inputs:
              provider: azurerm
              command: apply
              workingDirectory: terraform
              environmentServiceNameAzureRM: $(azureSubscription)
              commandOptions: >-
                -input=false
                -auto-approve
                -var "resource_group_name=$(rgName)"
                -var "service_plan_name=$(servicePlanName)"
                -var "web_app_name=$(appServicePrefix)-$(Build.SourceBranchName)"
                -var "image_name=$(imageName)"
                -var "image_tag=$(imageTag)"
                -var "acr_name=$(acrName)"
            env: { ARM_USE_AZUREAD: true }

          # 6️⃣ Deploy image to Web App
          - task: AzureWebAppContainer@1
            displayName: "Deploy container to App Service"
            inputs:
              azureSubscription: $(azureSubscription)
              resourceGroupName: $(rgName)
              appName: $(appServicePrefix)-$(Build.SourceBranchName)
              imageName: $(acrName).azurecr.io/$(imageName):$(imageTag)
